package my.ru;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.sql.SQLException;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class Main {
    private static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    private static BirthdayBot bot;

    public static void main(String[] args) {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            bot = new BirthdayBot();
            botsApi.registerBot(bot);

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ 9:00 —É—Ç—Ä–∞
            long initialDelay = getInitialDelay();
            scheduler.scheduleAtFixedRate(Main::checkUpcomingBirthdays,
                    initialDelay, TimeUnit.DAYS.toSeconds(1), TimeUnit.SECONDS);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                scheduler.shutdown();
                try {
                    if (!scheduler.awaitTermination(10, TimeUnit.SECONDS)) {
                        scheduler.shutdownNow();
                    }
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }));

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: " + e.getMessage());
            System.exit(1);
        }
    }

    private static void checkUpcomingBirthdays() {
        try {
            LocalDate today = LocalDate.now();
            BirthdayDatabase database = bot.getDatabase();
            List<Long> chatIds = database.getAllChatIds();

            if (chatIds.isEmpty()) return;

            checkBirthdaysForDate(today, "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:");
            checkBirthdaysForDate(today.plusDays(3), "‚è≥ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:");
            checkBirthdaysForDate(today.plusDays(7), "üóì –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:");

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private static void checkBirthdaysForDate(LocalDate date, String messagePrefix) throws SQLException {
        List<Long> chatIds = bot.getDatabase().getAllChatIds();
        String dateStr = date.format(DateTimeFormatter.ofPattern("dd.MM"));

        for (Long chatId : chatIds) {
            List<String> birthdays = bot.getDatabase().getBirthdaysByDateForChat(date, chatId);
            if (birthdays.isEmpty()) continue;

            StringBuilder message = new StringBuilder(messagePrefix);
            if (!date.isEqual(LocalDate.now())) {
                message.append(" (").append(dateStr).append(")");
            }
            message.append(":\n\n");

            birthdays.forEach(name -> message.append("‚Ä¢ ").append(name).append("\n"));

            if (date.isEqual(LocalDate.now())) {
                message.append("\n").append(getRandomCongratulation());
            }

            bot.sendMessage(chatId, message.toString());
        }
    }

    private static String getRandomCongratulation() {
        String[] congrats = {
                "–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é –∏ —Å–º–µ—Ö–æ–º!",
                "–ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ —É—Å–ø–µ—Ö–æ–≤ –≤–æ –≤—Å–µ—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö!",
                "–ü—É—Å—Ç—å —Å–±—É–¥—É—Ç—Å—è –≤—Å–µ –º–µ—á—Ç—ã –∏ –∂–µ–ª–∞–Ω–∏—è –≤ —ç—Ç–æ—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å!"
        };
        return congrats[new Random().nextInt(congrats.length)];
    }

    private static long getInitialDelay() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime nextRun = now.withHour(21).withMinute(5).withSecond(0);

        if (now.isAfter(nextRun)) {
            nextRun = nextRun.plusDays(1);
        }

        return Duration.between(now, nextRun).getSeconds();
    }
}